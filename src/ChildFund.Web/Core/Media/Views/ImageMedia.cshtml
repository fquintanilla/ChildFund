@using ChildFund.Web.Core.Media.Interfaces
@using ChildFund.Web.Infrastructure.Display
@model ChildFund.Web.Core.Media.ViewModels.ImageMediaDataViewModel

@{
    var imageMediaService = ServiceLocator.Current.GetInstance<IImageMediaService>();

    var imageUrl = Url.ContentUrl(Model.ImageLink);
    var isSvg = imageUrl.EndsWith("svg", StringComparison.InvariantCultureIgnoreCase);
    var asPicture = ViewData["picture"] != null && bool.Parse(ViewData["picture"].ToString()) && !isSvg;
    var useWebp = (ViewData["webp"] == null || bool.Parse(ViewData["webp"].ToString())) && (imageUrl.EndsWith("png", StringComparison.InvariantCultureIgnoreCase) || imageUrl.EndsWith("jpg", StringComparison.InvariantCultureIgnoreCase) || imageUrl.EndsWith("jpeg", StringComparison.InvariantCultureIgnoreCase));
    var isWebp = imageUrl.EndsWith("webp", StringComparison.InvariantCultureIgnoreCase);

	var sizes = (PictureSizeList)ViewData["sizes"] ?? Model.DefaultPictureSizes;

    var imgOverrides = ViewData["imgOverrides"] as Dictionary<PictureDimensionBreakpoints, ContentReference>;

    var viewWidth = ViewData["width"] != null ? $"{ViewData["width"]}" : null;
    var viewHeight = ViewData["height"] != null ? $"{ViewData["height"]}" : null;

    var dimensionsWidth = sizes != null ? $"{sizes.ImageWidth}" : viewWidth;
    var dimensionsHeight = sizes != null ? $"{sizes.ImageHeight}" : viewHeight;

    var isLazy = ViewData["lazy"] == null || bool.Parse(ViewData["lazy"].ToString());

    var defaultName = System.IO.Path.GetFileNameWithoutExtension(Model.Name);
    var altText = Model.AltText ?? defaultName;
    var description = Model.Description;
}

@if (!asPicture)
{
    RenderImage(imageUrl, altText, isLazy, description, ViewData["class"], viewWidth, viewHeight, null);
}
else
{
    <picture @{
        RenderProperty("class", ViewData["class"]);
    }>
        @if (sizes?.SourceSetDimensions != null && sizes.SourceSetDimensions.Any())
        {
            foreach (var entry in sizes?.SourceSetDimensions)
            {
                var breakpointImageUrl = imageUrl;

                if (imgOverrides?.ContainsKey((PictureDimensionBreakpoints)entry.MaxWidth) == true)
                {
                    var imgOverride = imgOverrides[(PictureDimensionBreakpoints)entry.MaxWidth];
                    if (imgOverride != null)
                    {
                        breakpointImageUrl = Url.ContentUrl(imgOverride);
                    }
                }

                var urlListRegular = imageMediaService.BuildUrlsFromCutoffs(breakpointImageUrl, entry.Cutoffs, false);
                var urlListWebp = imageMediaService.BuildUrlsFromCutoffs(breakpointImageUrl, entry.Cutoffs, true);

                @if (!isWebp)
                {
                    <source media="(max-width: @(entry.MaxWidth)px)" srcset="@urlListRegular">
                }
                @if (useWebp || isWebp)
                {
                    <source media="(max-width: @(entry.MaxWidth)px)" srcset="@urlListWebp" type="image/webp">
                }
            }

            if (useWebp || isWebp)
            {
                var webpUrlList = imageMediaService.BuildUrlsFromCutoffs(imageUrl, sizes.WebpCutoffs, true);
                <source srcset="@webpUrlList" type="image/webp">
            }
        }

        @{
            var imageUrlList = imageMediaService.BuildUrlsFromCutoffs(imageUrl, sizes.ImageCutoffs, true);
            RenderImage($"{imageUrl}?width={dimensionsWidth}&height={dimensionsHeight}", altText, isLazy, description, null, dimensionsWidth, dimensionsHeight, imageUrlList);
        }
    </picture>
}

@{
    void RenderProperty(string property, object data, bool hide = false)
    {
        if (!hide && data != null && !string.IsNullOrEmpty((string)data))
        {
            @Html.Raw($" {property}=\"{data}\"")
            ;
        }
    }

    void RenderImage(string imageUrl, string altText, bool isLazy, string description, object cssClass, string width, string height, string srcset)
    {
        <img src="@imageUrl"
        @{
            RenderProperty("alt", altText);
        }
        @{
            RenderProperty("loading", "lazy", !isLazy);
        }
        @{
            RenderProperty("title", description);
        }
        @{
            RenderProperty("class", cssClass);
        }
        @{
            RenderProperty("width", width);
        }
        @{
            RenderProperty("height", height);
        }
        @{
            RenderProperty("srcset", srcset);
        } />
    }
}