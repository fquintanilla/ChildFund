@model ChildFund.Web.Features.Checkout.ViewModels.CheckoutViewModel

@{
    var totalItem = Model.Shipments.SelectMany(x => x.CartItems).Sum(x => x.Quantity);
}

<h4 class="mb-3">@Html.TranslateFallback("/Shared/Payments", "Payments")</h4>
<input type="hidden" class="jsTotalQuantityCheckout" value="@((int)totalItem)" />

@if (Model.Payments.Any())
{
    <div class="table-responsive mb-3">
        <table class="table align-middle">
            <thead class="table-light">
                <tr>
                    <th scope="col" class="w-50">@Html.Raw("Payment Type")</th>
                    <th scope="col" class="w-25">@Html.Raw("Amount")</th>
                    <th scope="col" class="text-end w-25"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var payment in Model.Payments)
                {
                    <tr>
                        <td>@payment.Description</td>
                        <td>@payment.Amount.ToString()</td>
                        <td class="text-end">
                            <button type="button"
                                    class="btn btn-link text-danger p-0 jsRemovePayment"
                                    aria-label="Remove payment"
                                    data-amount="@payment.Amount"
                                    data-method-id="@payment.PaymentMethodId"
                                    data-keyword="@payment.SystemKeyword"
                                    data-url="@Url.Action("RemovePayment", "Checkout", null)">
                                <i data-feather="x"></i>
                                Remove
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<hr class="my-4" />

@if (Model.OrderSummary.PaymentTotal != 0)
{
    @await Html.PartialAsync("~/Features/Checkout/Payment.cshtml", Model)

    <div class="mb-3">
        @Html.LabelFor(m => m.OrderSummary.PaymentTotal, new { @class = "form-label" })
        @Html.TextBoxFor(m => m.OrderSummary.PaymentTotal, new { @class = "form-control", inputmode = "decimal" })
        @Html.ValidationMessageFor(m => m.OrderSummary.PaymentTotal, null, new { @class = "text-danger small" })
    </div>

    @if (ViewData.ModelState["SelectedPayment"]?.Errors?.Count > 0)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Payment Method is invalid</strong>
        </div>
    }
    @if (ViewData.ModelState["PaymentTotal"]?.Errors?.Count > 0)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Payments total is invalid</strong>
        </div>
    }

    <div class="d-grid d-sm-flex gap-2">
        <button type="button"
                class="btn btn-dark jsAddPayment"
                url="@Url.Action("UpdatePayment", "Checkout")">
            @Html.TranslateFallback("/Shared/AddPayment", "Add Payment")
        </button>
    </div>
}

<script src="https://cdn.jsdelivr.net/npm/axios@1.7.2/dist/axios.min.js"></script>

<script type="module">
    import CheckoutNew from '/js/checkout.js';

    document.addEventListener('DOMContentLoaded', () => {
        const checkout = new CheckoutNew();
        checkout.init();   // initialize click and change events
    });
</script>