@model ChildFund.Web.Features.Header.LargeCartViewModel

<div class="large-cart">
    @foreach (var shipment in Model.Shipments)
    {
        foreach (var cartItem in shipment.CartItems)
        {
            var viewData = new ViewDataDictionary(this.ViewData);
            viewData.Add(new KeyValuePair<string, object>("ShipmentId", shipment.ShipmentId));
            <div class="row product-tile-list__item jsCartItem">
                @await Html.PartialAsync("~/Features/NamedCarts/DefaultCart/_ItemTemplate.cshtml", cartItem, viewData)
            </div>
        }
    }
    <div class="d-flex flex-column flex-sm-row justify-content-between align-items-center mt-4 gap-3">

        <!-- Continue Shopping -->
        <a href="@Model.ReferrerUrl"
           class="btn btn-outline-secondary d-flex align-items-center gap-2 px-4 py-2"
           title="@Html.TranslateFallback("/Checkout/Continue/Button", "Continue shopping")">
            <i data-feather="arrow-left-circle"></i>
            <span>@Html.TranslateFallback("/Checkout/Continue/Button", "Continue shopping")</span>
        </a>

        <!-- Clear Cart -->
        <button id="clearCart"
                type="button"
                class="btn btn-outline-danger d-flex align-items-center gap-2 px-4 py-2"
                data-url="@Url.Action("ClearCart", "DefaultCart")"
                title="@Html.TranslateFallback("/Cart/Labels/ClearCart", "Clear Cart")">
            <i data-feather="trash-2"></i>
            <span>@Html.TranslateFallback("/Cart/Labels/ClearCart", "Clear Cart")</span>
        </button>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const btn = document.getElementById('clearCart');
  if (!btn) return;

  btn.addEventListener('click', async function () {
    if (!confirm('@Html.TranslateFallback("/Cart/Confirm/Clear", "Are you sure you want to clear your cart?")')) return;

    const url = btn.dataset.url;
    if (!url) { console.error('Missing data-url on #clearCart'); return; }

    // Optional anti-forgery token (safe to include even if not required)
    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

    btn.disabled = true;

    try {
      const res = await fetch(url, {
        method: 'POST',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          ...(token ? { 'RequestVerificationToken': token } : {})
        }
      });

      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json(); // expects ChangeCartJsonResult

      if ((data.StatusCode ?? data.statusCode) === 1) {
        // Update UI — simplest is reload to reflect empty cart
        window.location.reload();
      } else {
        alert((data.Message ?? data.message) || 'Failed to clear cart.');
        console.warn('ClearCart response:', data);
      }
    } catch (err) {
      console.error('ClearCart error:', err);
      alert('Error clearing cart. Please try again.');
    } finally {
      btn.disabled = false;
    }
  });
});
</script>