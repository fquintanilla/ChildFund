@model ChildFund.Web.Features.Sponsorship.SponsorChildViewModel

@{
    var addToCartUrl = Url.Action("AddToCart", "DefaultCart") ?? "";
    var miniCartDetailsUrl = Url.Action("MiniCartDetails", "DefaultCart") ?? "";
    var carouselId = "sponsorChildCarousel_" + Guid.NewGuid().ToString("N");
}

<style>
    /* Make control icons always visible on light backgrounds */
    .sponsor-child-block .carousel-control-prev-icon,
    .sponsor-child-block .carousel-control-next-icon {
        background-color: rgba(0,0,0,.45);
        border-radius: 50%;
        width: 3rem;
        height: 3rem;
        background-size: 60% 60%;
    }

    .sponsor-child-block .carousel-control-prev,
    .sponsor-child-block .carousel-control-next {
        width: 4rem;
    }
</style>

<section class="container my-4 sponsor-child-block">
    @Html.AntiForgeryToken()

    <div id="@carouselId" class="carousel slide carousel-dark" data-bs-ride="carousel">
        <div class="carousel-inner">
            @for (var i = 0; i < Model.Children.Count; i++)
            {
                var child = Model.Children[i];
                var active = i == 0 ? "active" : "";
                var imgSrc = !string.IsNullOrWhiteSpace(child.ChildPhoto)
                ? $"data:image/jpeg;base64,{child.ChildPhoto}"
                : "https://via.placeholder.com/320x420?text=Child";

                <div class="carousel-item @active">
                    <div class="row justify-content-center">
                        <div class="col-12 col-md-8 col-lg-6">
                            <div class="card shadow-sm">
                                <div class="card-body text-center p-4">
                                    <img src="@imgSrc" class="img-fluid rounded mb-3"
                                         alt="Photo of @child.ShortName"
                                         style="max-height:420px; object-fit:cover;" />

                                    <h3 class="h4 mb-3">Hi I'm @child.ShortName</h3>

                                    <div class="d-flex justify-content-center small text-muted mb-3 gap-4">
                                        <span class="d-inline-flex align-items-center">
                                            <i class="bi bi-geo-alt me-1"></i>@child.CountryName
                                        </span>
                                        @if (!string.IsNullOrEmpty(child.DateOfBirth))
                                        {
                                            <span class="d-inline-flex align-items-center">
                                                <i class="bi bi-cake me-1"></i>
                                                @child.DateOfBirth
                                            </span>
                                        }
                                        @if (child.Age.HasValue)
                                        {
                                            <span class="d-inline-flex align-items-center">
                                                <i class="bi bi-person me-1"></i>@child.Age.Value @("years old")
                                            </span>
                                        }
                                    </div>

                                    <div class="d-grid mt-3">
                                        <button class="btn btn-primary add-to-cart"
                                                data-code="@Model.Code"
                                                data-qty="1"
                                                data-child-id="@child.ChildNumber"
                                                data-child-name="@child.ShortName">
                                            Add to Cart
                                        </button>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (Model.Children.Count > 1)
        {
            <button class="carousel-control-prev" type="button" data-bs-target="#@carouselId" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#@carouselId" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        }
    </div>

    <div id="sponsor-msg" class="mt-3" role="status" aria-live="polite"></div>
</section>


<script>
    (function () {
        const addToCartUrl = "@addToCartUrl";
        const miniCartUrl = "@miniCartDetailsUrl";

        function getToken() {
            const el = document.querySelector('input[name="__RequestVerificationToken"]');
            return el ? el.value : null;
        }
        function setMsg(html, ok) {
            const box = document.getElementById("sponsor-msg");
            if (!box) return;
            box.className = ok ? "alert alert-success" : "alert alert-danger";
            box.innerHTML = html;
        }

        async function localAddToCart(code, childId, childName) {
            const headers = {
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest"
            };
            const token = getToken();
            if (token) headers["RequestVerificationToken"] = token;

            // Quantity is ALWAYS 1
            return fetch(addToCartUrl, {
                method: "POST",
                headers,
                body: JSON.stringify({ code: code, quantity: 1, childId: childId, childName: childName }) // <<<
            });
        }

        document.querySelectorAll(".sponsor-child-block .add-to-cart").forEach(function (btn) {
            btn.addEventListener("click", async function () {
                btn.disabled = true;
                const code = btn.getAttribute("data-code"); // generic variant code
                const childId = btn.getAttribute("data-child-id"); // child's unique id
                const childName = btn.getAttribute("data-child-name"); // child's name

                try {
                    const res = await localAddToCart(code, childId, childName);
                    if (res.ok) {
                        setMsg("Added to cart.", true);
                        if (miniCartUrl) {
                            fetch(miniCartUrl, { headers: { "X-Requested-With": "XMLHttpRequest" } })
                                .then(r => r.text())
                                .then(html => {
                                    const c = document.querySelector("#miniCartContainer");
                                    if (c) c.innerHTML = html;
                                }).catch(() => { });
                        }
                    } else {
                        const json = await res.json().catch(() => null);
                        const msg = (json && (json.message || json.errorMessage)) || "Could not add to cart.";
                        setMsg(msg, false);
                    }
                } catch {
                    setMsg("Something went wrong. Please try again.", false);
                } finally {
                    btn.disabled = false;
                }
            });
        });
    })();
</script>
